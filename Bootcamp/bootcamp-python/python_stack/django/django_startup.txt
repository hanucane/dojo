/************************** How to create a Django Project: ****************************************/

Step 1: Create a new project
Bash command - django-admin startproject {{ name of _project }}

Step 2: Create an apps folder 
Command - cd {{ name of __project }} -> mkdir apps -> cd apps

Step 3: Create the "init" file
command - touch __init__.py

Step 4a: Create an app in the apps folder
Command - python ../manage.py startapp {{ name of app }}

Step 4b: create urls.py in the app folder
command - cd {{ name of app }} -> touch urls.py

/**************************** Setting Up the URLs Files *********************************************/

Step 5a: Navigate to the urls.py file in the {{ name of _project }} main folder - > ensure that you update the following code:
from django.conf.urls import url, include # make sure to add include 

urlpatterns = [
    url(r'^', include('apps.{{ name of app }}.urls'))
]

Step 5b: Create a 'urls.py' file in the {{ name of app }} folder
Command - cd apps/{{ name of app }} (if you aren't in the folder yet) -> touch urls.py to create the urls.py. Once this is created, put the following code in that file:

from django.conf.urls import url
from . import views           # This line is new!
urlpatterns = [
    url(r'^$', views.index)   # this says "any request sent to this route, have views.py handle the request.
]  

Step 6: Navigate to {{ name of _project }} folder. -> open settings.py -> navigate to {{ INSTALLED_APP = [bunch of default code ] }}
At the top inside the {{ INSTALLED_APPS = ['in here'] }}, add your apps folders name:

Enter: [ 'apps.{{ name of app }}', ]

Step 7: Add the following code to the {{ name of app }}\urls.py file:

from django.conf.urls import url
from . import views           # This line is new!
urlpatterns = [
    url(r'^$', views.index)
]


/************************** Special Cases for us with newb computers ***********************/

python manage.py runserver 8001

/* Start Code for views.py */

from django.shortcuts import render, HttpResponse

def index(request):
    response = "hello world"
    return HttpResponse(response)

/* This is to be used to ensure that your file structure is set-up properly */



/******************************** Created the File folder Structure for templates and static *********/

Step 1: Navigate to the {{ name of app }} folder
Step 2: mkdir templates -> mkdir static
Step 3: cd templates -> mkdir {{ name of app }}
step 4: cd .. -> cd static -> mkdir {{ name of app}} -> cd {{ name of app }} -> mkdir css -> mkdir js -> mkdir img


/****************************** Creating a Session *****************************************/

Step 1: navigate to the primary folder that contains manage.py
Step 2: in the command prompt/terminal enter: python manage.py makemigrations
Step 3: in the command prompt/terminal enter: python manage.py migrate

Success -> Sessions is now available.

/* Some methods in views.py: */

request.session
request.session['name'] = request.POST['name']
request.session['counter'] = 100

Having the session apply information to the HTML page:
{{request.session.name}}

/* Useful session methods */

request.session['key']
	This will retrieve (get) the value stored in key
request.session['key'] = 'value'
	Set the value that will be stored by key
del request.session['key']
	Deletes a session key if it exists, throws a keyError if it doesn’t. Use along with try and except 
	since it’s better to ask for forgiveness than permission
'key' in request.session
	Returns a boolean of whether a key is in session or not
{{ request.session.name }}
	Use dot notation (.) to access request.session keys from templates since square brackets ([]) aren’t allowed there


/************************** Expressions Cheat Sheet ****************************************/

Here is a cheat sheet for expressions you'll be using regularly:

'^' Matches the following characters at the beginning of a string. Example: '^a' matches 'anna' but not 'banana'.
'$' Matches the previous characters at the end of a string. Example: 'a$' matches 'anna' and 'banana' but not 'fan'.
'[]' Matches any value in a range. Example: '[0-9]' matches '9' and '9s'.
'{n}' Matches n number repetitions of the preceding pattern. Example: '[0-9]{2}' matches '91' but not '9'
\d Matches digits.  Example: "\d" matches "8" and "877"
\d+ matches a string with one or more digits
\w Matches characters.
\w+ matches a string with one or more character/word
All of the above examples are pretty simple. You can combine any of the above patterns to match complex strings. 
You'll see lots of examples of regex in Django urls, but they follow a simple pattern.


/************************** Random Notes ************************************/

Routes
The first handler for assigning tasks correctly is routing. Routing is handled by a separate document that contains a list of 
available routes and calls to the appropriate view functions. When a request is received routing identifies the view method to be called.

The Views File
Next, the appropriate views function will be executed. In our MTV structure, view functions generally:

Redirect to other routes
Render specific templates
Invoke methods attached to other pieces of our app that we characterize as models

Models
It is likely that the views file will call some model method in order to perform some operation on the database. Models should do the following:

Build database tables
Handle logic related to database operations, including validation

Templates
Lastly, a view function will either render a template or redirect. When a template is rendered Django has to parse the file looking for logic or 
variables you've inserted, interpret those, before sending a complete HTML document as a response to the client. Django templates are so similar 
to Flask (Jinja2) templates that you'll hardly notice a difference.

MTV Frameworks
MTV stands for 'model template view', which describes the division of labor in Django. See below for a description of what each element does.

Model: builds database tables and handles all interaction with the database.

Templates: are served in their complete form to the client. Django's templating allows us to perform some logic and inject data into our HTML documents.

Views: The views document is somewhat confusingly named, but can be thought of as managing traffic. It is the view's job to get the right data for the 
right route delivered in the right form. Views handle the data we deliver to the user to view. Developers who design frameworks have to make decisions 
about organizing code. One of the most popular framework structures is very similar to Django's MTV structure. This alternative design pattern is known 
as MVC and is used by many frameworks. We'll review how MVC works and how it compares to Django.

MVC frameworks
Models: are just like Flask models. Frameworks differ in what the model layer does. In Django, much of our logic that deals with the database is moved to 
the model, while this may not be the case in other frameworks.

Views: In other frameworks like Ruby on Rails, views are the equivalent of Django templates. MVC frameworks attach the name views to the component users 
actually see, versus the data that is sent to the client.

Controller: The MVC controller is roughly equivalent to Django's views. In both framework types this component should be in charge of outsourcing work to 
the models and sending the appropriately formatted data to the client. We mentioned that some other frameworks don't outsource logic to the model. 
In those cases, many of our logical operations are done in the controller. As you can see, although Django's terminology varies slightly from the usual 
MVC pattern, the two are close enough that Django may be considered an MVC framework. Although it is important to use the right term for each component, 
we can think of Django as an MVC framework.



